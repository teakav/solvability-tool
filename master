## teakav's Case Solvability Tool ##
## version 0.1.5 ##
## last updated 04/21/2021 ##

# import GUI package

import PySimpleGUI as sg
sg.theme('SystemDefault')

# intro window

layout = [[sg.Text('Welcome to teakav\'s Case Solvability Tool')],
          [sg.Button('Continue')]]
window = sg.Window('Solvability Tool', layout)

# set an event loop

while True:
    event, values = window.read()
    
    if event == sg.WIN_CLOSED:
        break

# enter case details / case type

    if event == 'Continue':
        window.close()
        layout = [[sg.Text('Case Number:'),
                   sg.Input('',
                   key = 'case_no')],
                  [sg.Text('Case Type:'),
                   sg.Input('',
                   key = 'case_nat')],
                  [sg.Text('Case Assigned To:'),
                   sg.Input('',
                   key = 'case_assign')],
                  [sg.Text('Enter your case type:'),
                   sg.Combo(['Persons Crime', 'Missing / Runaway', 'Death Investigation', 'Property'],
                   key = 'case_type'),
                   sg.CalendarButton('Date Assigned',
                   key = 'date_assign')],
                  [sg.Button('Continue')]],
        window = sg.Window('Case Details', layout)
        event, values = window.read()

# if the case is not a property crime, it will be auto-assigned

        if event == 'Continue':
            window.close()
            if values['case_type'] == 'Persons Crime' or 'Missing / Runaway' or 'Death Investigation':
                layout = [[sg.Text('Case Number: '),
                           sg.Text(values['case_no'])],
                          [sg.Text('Case Nature: '),
                           sg.Text(values['case_nat'])],
                          [sg.Text('Case Assigned To: '),
                           sg.Text(values['case_assign'])],
                          [sg.Text('Case Type: '),
                           sg.Text(values['case_type'])],
                          [sg.Text('Auto-assign based on case type.')]],
                window = sg.Window('Case Details', layout)

# if the case is a property crime, enter solvability factors

            if values['case_type'] == 'Property':
                layout = [[sg.Text('Enter solvability factors:',
                                font = 'bold')],
                        [sg.Text('Credibility of victim / witness:'),
                        sg.Slider(range=(1, 5),
                                    default_value = 3,
                                    orientation = 'h',
                                    key = 'vicwit_cred')],                     
                        [sg.Text('Estimated time lapse of crime discovery:'),
                        sg.Combo(['Less than 1 hour', '1 - 12 hours', '12 - 24 hours', 'More than 24 hours'],
                                    key = 'time_lapse')],
                        [sg.Text('Video availability:'),
                        sg.Combo(['None', 'Available', 'Recovered'],
                                    key = 'video')],
                        [sg.Checkbox("Crime discovered by on-view officer?",
                                    key = 'crime_ofc')],
                        [sg.Checkbox('Suspect can be identified?',
                                    key = 'sus_id')],
                        [sg.Checkbox('Suspect can be described?',
                                    key = 'sus_desc')],
                        [sg.Checkbox('Suspect can be located?',
                                    key = 'sus_loc')],
                        [sg.Checkbox('Suspect has been seen in the area?',
                                    key = 'sus_area')],
                        [sg.Checkbox('Suspect vehicle can be identified?',
                                    key = 'sus_veh')],
                        [sg.Checkbox('Suspect vehicle can be partially described?',
                                    key = 'sus_vehpart')],
                        [sg.Checkbox('Traceable stolen property?',
                                    key = 'trace_prop')],
                        [sg.Checkbox('Recovered stolen property?',
                                    key = 'recov_prop')],
                        [sg.Checkbox('Significant method of operation?',
                                    key = 'mo')],
                        [sg.Checkbox('Recovered physical evidence?',
                                    key = 'phys_ed')],
                        [sg.Checkbox('Recovered latent prints?',
                                    key = 'lat_prints')],
                        [sg.Checkbox('Limited opportunity crime?',
                                    key = 'opp_crime')],
                        [sg.Checkbox('I.D. theft packet completed?',
                                    key = 'id_theft')],
                        [sg.Text('Other considerations / community impact'),
                        sg.Slider(range=(0,5),
                                    orientation = 'h',
                                    key = 'other')],
                        [sg.Button("Continue")]]
                window = sg.Window(" ", layout)
                event, values = window.read()

# assign solvability points to keys

                if event == "Continue":
                    
                    solvpts = 0
                    if values['vicwit_cred'] == 1:
                        solvpts = (solvpts + 1)
                    if values['vicwit_cred'] == 2:
                        solvpts = (solvpts + 2)
                    if values['vicwit_cred'] == 3:
                        solvpts = (solvpts + 3)
                    if values['vicwit_cred'] == 4:
                        solvpts = (solvpts + 4)
                    if values['vicwit_cred'] == 5:
                        solvpts = (solvpts + 5)
                    if values['time_lapse'] == 'Less than 1 hour':
                        solvpts = (solvpts + 3)
                    if values['time_lapse'] == '1 - 12 hours':
                        solvpts = (solvpts + 2)
                    if values['time_lapse'] == '12 - 24 hours':
                        solvpts = (solvpts + 1)
                    if values['time_lapse'] == 'More than 24 hours':
                        solvpts = (solvpts + 0)
                    if values['video'] == 'None':
                        solvpts = (solvpts + 0)
                    if values['video'] == 'Available':
                        solvpts = (solvpts + 2)
                    if values['video'] == 'Recovered':
                        solvpts = (solvpts + 4)
                    if values['crime_ofc'] == True:
                        solvpts = (solvpts + 5)
                    if values['sus_id'] == True:
                        solvpts = (solvpts + 10)
                    if values['sus_desc'] == True:
                        solvpts = (solvpts + 4)
                    if values['sus_loc'] == True:
                        solvpts = (solvpts + 4)
                    if values['sus_area'] == True:
                        solvpts = (solvpts + 2)
                    if values['sus_veh'] == True:
                        solvpts = (solvpts + 7)
                    if values['sus_vehpart'] == True:
                        solvpts = (solvpts + 2)
                    if values['trace_prop'] == True:
                        solvpts = (solvpts + 5)
                    if values['recov_prop'] == True:
                        solvpts = (solvpts + 7)
                    if values['mo'] == True:
                        solvpts = (solvpts + 3)
                    if values['phys_ed'] == True:
                        solvpts = (solvpts + 3)
                    if values['lat_prints'] == True:
                        solvpts = (solvpts + 5)
                    if values['opp_crime'] == True:
                        solvpts = (solvpts + 4)
                    if values['id_theft'] == True:
                        solvpts = (solvpts + 1)
                    if values['other'] == 0:
                        solvpts = (solvpts + 0)
                    if values['other'] == 1:
                        solvpts = (solvpts + 1)
                    if values['other'] == 2:
                        solvpts = (solvpts + 2)
                    if values['other'] == 3:
                        solvpts = (solvpts + 3)
                    if values['other'] == 4:
                        solvpts = (solvpts + 4)
                    if values['other'] == 5:
                        solvpts = (solvpts + 5)

        # get results

                    if solvpts > 12:
                        popup = sg.popup_ok("Solvability Score:",
                                            solvpts,
                                            "This case will likely be assigned for review.",
                                            title = "Results")
                        window.close()
                        break

                    if solvpts < 12:
                        popup = sg.popup_ok("Solvability Score:",
                                            solvpts,
                                            "This case will likely be deactivated before assignment.",
                                            title = "Results")
                        window.close()
                        break

window.close()

## use pyinstaller to create Windows .exe file